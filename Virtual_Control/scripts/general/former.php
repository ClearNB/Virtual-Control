<?php

interface form_in {
    const NONE = 0;
    const LOW = 1;
    const MEDIUM = 3;
    const HIGH = 5;
}

/**
 * FormGenerator v1.0.0
 * Generated by CLEAR STUDIOS.
 * Language : PHP
 * 
 * @author ClearNB <clear.navy.blue.star@gmail.com>
 */
class form_generator implements form_in {
    /**
     * @var 
     * @var type 
     */
    private $select_data;
    private $fdata;
    private $data;
    private $id;

    /**
     * Form Generatorのコンストラクタです。
     * POST通信をベースとしたフォームを作ります。
     * ここでは<form>の内容をを定義します。
     * @param string  $id	    フォームグループの一意なIDを指定します。
     * @param string  $action	    【任意】アクション先の外部ファイル。通常空白
     * @param integer $color_flag   背景のフラグを設定します（1..主背景, 2..黒背景）
     */
    function __construct($id, $action = '', $color_flag = 1) {
	if ($color_flag == 1) {
	    $this->data = ["<div class=\"bg-primary\"><div class=\"container py-2\"><form id=\"$id\" action=\"$action\" method=\"POST\">"];
	} else if ($color_flag == 2) {
	    $this->data = ["<div class=\"bg-dark\"><div class=\"container py-2\"><form id=\"$id\" action=\"$action\" method=\"POST\">"];
	}
	$this->id = $id;
    }
    
    /* UI表示系 */
    
    /**
     * タイトルを作成します
     * @param strng $title  タイトル名を指定します
     * @param strng $icon   タイトルの左隣につけるアイコンの情報を入力します
     */
    function Title($title, $icon) {
	array_push($this->data, "<div class=\"form-group pt-2\"><div class=\"w-100\"><h2><i class=\"fas fa-$icon fa-fw\"></i>$title</h2></div></div>");
    }

    /**
     * サブタイトルを作成します
     * @param string $title	    タイトル名を指定します
     * @param string $caption	    タイトルの下部につける説明を入力します
     * @param string $icon	    タイトルの左隣につけるアイコンの情報を入力します
     * @param string $darkBack	    黒背景を変えるかどうかを指定します（デフォルト: false）
     */
    function SubTitle($title, $caption, $icon, $darkBack = false) {
	if($darkBack) {
	    array_push($this->data, "<div class=\"form-group pt-2\"><div class=\"w-100\"><h3><i class=\"fas fa-$icon fa-fw\"></i>$title</h3><hr class=\"orange\"><p class=\"py-2\">$caption</p></div></div>");
	} else {
	    array_push($this->data, "<div class=\"form-group pt-2\"><div class=\"w-100\"><h3><i class=\"fas fa-$icon fa-fw\"></i>$title</h3><hr><p class=\"py-2\">$caption</p></div></div>");
	}
    }

    /**
     * 説明を追加します。
     * @param string $caption	説明欄を追加します
     * @param string $ishr	<hr>タグを周囲につけるかどうかを設定します（デフォルト: false）
     * @param int    $py	空白の高さ幅を変更します（デフォルト: 0）
     * @return void
     */
    function Caption($caption, $ishr = true, $py = form_in::NONE): void {
	$hr_text = '';
	if($ishr) {
	    $hr_text = '<hr>';
	}
	$py_text = '';
	if($py > 0) {
	    if($py > 5) {
		$py = 5;
	    }
	    $py_text = "py-$py";
	}
	array_push($this->data, "<div class=\"form-group\">$hr_text<div>$caption</div>$hr_text</div>");
    }

    /**
     * 入力フォーマットを作成します。
     * @param type $id		    入力IDを指定します
     * @param type $desc	    説明を加えます
     * @param type $small_desc	    下部に小さな説明を加えます
     * @param type $icon	    アイコン情報です
     * @param type $required	    【任意（def: false）】入力必要かを入力します（true or false）
     * @param type $auto_completed  【任意（def: false）】補完入力を可能にするか判定します（true of face）
     */
    function Input($id, $desc, $small_desc, $icon, $required = false, $auto_completed = false) {
	$r_text = "任意";
	$r_flag = "";
	if ($required) {
	    $r_text = "必須";
	    $r_flag = "required=\"required\"";
	}
	if ($auto_completed) {
	    $r_flag .= " autocomplete=\"on\"";
	} else {
	    $r_flag .= " autocomplete=\"off\"";
	}
	array_push($this->data, "<div class=\"form-group pt-2\"><label class=\"importantLabel col-md-3\">【" . $r_text . "】</label><label class=\"formtext col-md-8\">$desc<i class=\"fas fa-$icon fa-2x ml-2\"></i></label><input type=\"text\" class=\"form-control bg-dark my-1 form-control-lg shadow-sm text-monospace\" placeholder=\"Input Here\" $r_flag id=\"$id\" name=\"$id\"><small class=\"form-text text-body\" id=\"$id-label\">$small_desc</small></div>");
    }

    /**
     * パスワード入力フォーマットを作成します。
     * @param type $id		    入力IDを指定します
     * @param type $desc	    説明を加えます
     * @param type $small_desc	    下部に小さな説明を加えます
     * @param type $icon	    アイコン情報です
     * @param type $required	    【任意（def: true）】入力必要かを入力します（true or false）
     * @param type $auto_completed  【任意（def: false）】補完入力を可能にするか判定します（true or false）
     * @param type $eye_modify      【任意（def: true）】表示用ボタンを表示させます（true or false）
     */
    function Password($id, $desc, $small_desc, $icon, $required = true, $auto_completed = false, $eye_modify = true) {
	$r_text = "任意";
	$r_flag = "";
	$m_text = "";
	if ($required) {
	    $r_text = "必須";
	    $r_flag = "required=\"required\"";
	}
	if ($auto_completed) {
	    $r_flag .= " autocomplete=\"on\"";
	} else {
	    $r_flag .= " autocomplete=\"off\"";
	}
	if ($eye_modify) {
	    $m_text = '<span class="field-icon"><i toggle="#password-field" class="fas fa-eye toggle-password"></i></span>';
	}
	array_push($this->data, "<div class=\"form-group pt-2\"><label class=\"importantLabel col-md-3\">【" . $r_text . "】</label><label class=\"formtext col-md-8\">$desc<i class=\"fas fa-$icon fa-2x ml-2\"></i></label><input type=\"password\" class=\"form-control bg-dark my-1 form-control-lg shadow-sm text-monospace\" placeholder=\"Input Here\" $r_flag id=\"$id\" name=\"$id\">$m_text<small class=\"form-text text-body\">$small_desc</small></div>");
    }

    /**
     * チェックリスト／ラジオボタンを作成します
     * @param number $type	チェックタイプを指定します（1...Radio, それ以外...Checkbox）
     * @param string $id	IDを指定します（ここでは一意の値です）
     * @param string $name	フォームグループ内の名前を指定します（グループにする場合、名前は統一にする必要があります）
     * @param non-se $value	加える値を指定します
     * @param non-se $outname	表示される名前を指定します
     * @param bool   $selected	選択されている状態にするかどうかを指定します
     * @param string $required	【任意（def: required）】入力必要かを入力します（'' or 'required'）
     */
    function Check($type, $id, $name, $value, $outname, $selected, $required = 'required') {
	$type_text = 'checkbox';
	$class_text = 'checkbox02';
	if ($type == 1) {
	    $type_text = 'radio';
	    $class_text = 'radio02';
	}
	$sel_text = '';
	if ($selected) {
	    $sel_text = 'checked';
	}
	array_push($this->data, '<input ' . $sel_text . ' required="' . $required . '" id="' . $id . '" type="' . $type_text . '" name="' . $name . '" value="' . $value . '"' . $required . '><label for="' . $id . '" class="' . $class_text . '">' . $outname . '</label><br>');
    }

    /**
     * ボタン【通常】を作成します
     * @param type $id		IDを指定します
     * @param type $desc	表示名を指定します
     * @param type $type	【任意（def: submit）】ボタンタイプを指定します（submit, button）
     * @param type $icon	【任意（def: ）】アイコン情報を指定します
     * @param type $color	【任意（def: dark）】色を指定します（dark, gray, orange）
     * @param type $disabled	【任意（def: ）】無効化状態にするか設定します（disabled）
     */
    function Button($id, $desc, $type = 'submit', $icon = '', $color = 'dark', $disabled = '') {
	if(strpos($icon, 'fa-') !== false) {
	    array_push($this->data, "<div class=\"py-2\"><button type=\"$type\" id=\"$id\" class=\"btn btn-$color btn-block btn-lg shadow-lg mb-2\" $disabled><i class=\"fa-fw fa-lx $icon\"></i>$desc</button></div>");
	} else {
	    array_push($this->data, "<div class=\"py-2\"><button type=\"$type\" id=\"$id\" class=\"btn btn-$color btn-block btn-lg shadow-lg mb-2\" $disabled><i class=\"fas fa-fw fa-lx fa-$icon\"></i>$desc</button></div>");
	}
    }

    /**
     * <div class="row py-2"> を作成します
     * ボタンの分割を並ばせたり、コンテンツを分割するのに必要です
     */
    function openRow() {
	array_push($this->data, "<div class=\"row py-2\">");
    }

    /**
     * <div> 属性を閉じます
     */
    function closeDiv() {
	array_push($this->data, "</div>");
    }

    /**
     * <div class="text-center"> を作成します
     * 要素を中央揃えにします
     */
    function openCenter() {
	array_push($this->data, "<div class=\"text-center\">");
    }

    /**
     * <ul class="black-view"> を作成します
     * リストを作成します
     */
    function openList() {
	array_push($this->data, '<ul class="black-view">');
    }

    /**
     * openList() で作成したリストに対しリストを追加します
     * @param type $text    リストの値
     */
    function addList($text) {
	array_push($this->data, '<li>' . $text . '</li>');
    }

    /**
     * openList() で作成したリストを閉じます
     */
    function closeList() {
	array_push($this->data, '</ul>');
    }

    /**
     * <select> 属性を開きます
     * @param string $name	    フォームグループ名を指定します(sl_[pgnumx2]_[customx2])
     * @param string $place_name    プレースホルダの表示名を設定します(Default: '選択する')
     */
    function openSelect($name, $place_name = '選択する') {
	$this->select_data = ["TEXT" => [], "VALUE" => []];
	$this->fdata = '<div class="sel">'
		. '<span class="sel__placeholder sel__placeholder--blackpanther" data-placeholder="' . $place_name . '">' . $place_name . '</span>'
		. '<div class="sel__box sel__box--black-panther">[OUTNAME_DATA]</div>'
		. '<select name="' . $name . '" id="' . $name . '">[VALUE_DATA]</select>'
		. '</div>';
    }

    /**
     * openSelect() で作成したリストに対し要素を追加します
     * @param non-se $value	    実際に格納する値を指定します
     * @param string $outname	    外部で出力される文字を指定します
     */
    function addOption($value, $outname) {
	array_push($this->select_data['VALUE'], '<option value="' . $value . '">' . $outname . '</option>');
	array_push($this->select_data['TEXT'], '<span class="sel__box__options sel__box__options--black-panther">' . $outname . '</span>');
    }

    /**
     * openSelect() で作成したリストを閉じます
     */
    function closeSelect() {
	$text_data = implode('', $this->select_data['TEXT']);
	$value_data = implode('', $this->select_data['VALUE']);
	$r_data = str_replace('[VALUE_DATA]', $value_data, str_replace('[OUTNAME_DATA]', $text_data, $this->fdata));
	array_push($this->data, $r_data);
    }

    /**
     * BootStrap カードを黒背景を前提に作成します
     * @param type $caption_title   キャプション自体のタイトルを設定します
     * @param type $icon	    タイトル横に設置するアイコンを指定します
     * @param type $title	    カードタイトルを指定します
     * @param type $caption	    内容を指定します
     */
    function Card($caption_title, $icon, $title, $caption) {
	array_push($this->data, '<div class="card mt-1 rounded"><div class="card-header bg-secondary border-bottom border-dark">' . $caption_title . '</div><div class="card-body bg-primary"><h5 class="text-left text-monospace"><i class="' . $icon . '"></i>' . $title . '</h5><p class="text-left">' . $caption . '</p></div></div>');
    }
    
    /**
     * BootStrap カードを主背景を前提に作成します
     * @param type $caption_title   キャプション自体のタイトルを設定します
     * @param type $icon	    タイトル横に設置するアイコンを指定します
     * @param type $title	    カードタイトルを指定します
     * @param type $caption	    内容を指定します
     */
    function CardDark($caption_title, $icon, $title, $caption) {
	array_push($this->data, '<div class="card mt-1 rounded"><div class="card-header bg-dark border-bottom border-primary">' . $caption_title . '</div><div class="card-body bg-dark"><h5 class="text-left text-monospace"><i class="' . $icon . '"></i>' . $title . '</h5><p class="text-left">' . $caption . '</p></div></div>');
    }
    
    /**
     * BootStrap リストグループを開きます
     */
    function openListGroup() {
	array_push($this->data, '<div class="list-group">');
    }
    
    /**
     * BootStrap リストグループのデータを作成します
     * @param type $id		    このリストに対するIDを指定します
     * @param type $title	    リストグループのタイトルを指定します
     * @param type $icon	    リストグループのアイコンを指定します
     * @param type $text	    リストグループのテキストを追加します
     * @param type $small_text	    リストグループの小さなテキストを追加します
     */
    function ListGroupData($id, $title, $icon, $text, $small_text) {
	array_push($this->data, '<div class="list-group-item list-group-item-action flex-column align-items-start active list-group-item-dark mb-2" id="' . $id . '"><div class="d-flex w-100 justify-content-between"><h5 class="mb-1"><i class="fas fa-fw fa-' . $icon . ' fa-lg"></i>'  . $title . '</h5></div><p class="mb-1">' . $text . '</p> <small>' . $small_text . '</small></div>');
    }

    /**
     * 背景を変更します。
     * @param type $color 0..閉じる, 1..プライマリ（オレンジ）, 2..ダーク（黒）
     */
    function bgChange($color = 1) {
	if ($color == 1) {
	    array_push($this->data, '<div class="py-3 bg-primary"><div class="container">');
	} else {
	    array_push($this->data, '<div class="py-3 bg-dark"><div class="container">');
	}
    }

    /**
     * プッシュされたすべてのデータを取り出し、後入先出法により文字列化し出力します
     * @return string	フォームクラス内で作成されたデータを文字列として返します
     */
    function Export() {
	array_push($this->data, "</form></div></div>");
	$text = '';
	foreach ($this->data as $var) {
	    $text = $text . $var;
	}
	return $text;
    }
    
    function getID() {
	return $this->id;
    }
    
    static function ExportClass($formers) {
	$js = '<script type="text/javascript">';
	foreach($formers as $f) {
	    $js .= 'var ' . $f->getID() . ' = \'' . $f->Export() . '\';';
	}
	$js .= '</script>';
	return $js;
    }
}

/**
 * ローディング画面を作成します
 * @param type $id	    フォームに与えるIDを指定します
 * @param type $title	    ローディング中に出すタイトル部分です
 * @param type $text	    ローディング中に出すテキスト部分です
 * @return form_generator   作成したform_generatorオブジェクトとして返します
 */
function fm_ld($id, $title = 'しばらくお待ちください', $text = '更新中です。しばらくお待ちください...') {
    $fm = new form_generator($id, '');
    $fm->SubTitle($title, $text, 'spinner fa-spin');
    return $fm;
}

/**
 * 失敗画面を作成します
 * @param type $id	    フォームに与えるIDを指定します
 * @param type $bt_id	    戻る際のボタンIDを指定します（空の場合作成しない）
 * @param type $title	    失敗画面でのタイトルを指定します
 * @param type $text	    その原因となるテキスト部分を指定します
 * @return form_generator   作成したform_generatorオブジェクトとして返します
 */
function fm_fl($id, $bt_id, $title = '失敗しました', $text = '[原因]') {
    $fm = new form_generator($id, '');
    $fm->SubTitle($title, $text, 'exclamation-triangle');
    if($bt_id != '') {
	$fm->Button($bt_id, '戻る', 'backward', '');
    }
    return $fm;
}

